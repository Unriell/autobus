{"name":"Autobus","tagline":"An enhanced event bus for Android projects","body":"**Autobus** is an enhanced event bus intended to allow communication between decoupled parts of an application.\r\n\r\nIt is based on concepts from [Otto][1], [EventBus][2] and [RxJava][3].\r\n\r\n\r\nWhy?\r\n------------------------------\r\nWe developed our own Event Bus to cover two main needs that aren't covered by existing libraries:\r\n\r\n* __Explicit contract between subscribers and emitters__\r\n\r\nAs one of the common use case of Event Buses is the communication between _interactors_ (asynchronous core operations of an app) and _presenters_ (adapters between _views_ and _interactors_) it is desirable to maintain an explicit definition or contract between the emitters and the subscribers. Autobus accomplishes this task with BusObservable API. A _interactor_ can return a BusObservable instance and subscribers can directly be subscribed to this observable; the observable is the contract itself as it defines the _Bus_, the _Channel_ and also the data that will be emitted. \r\n\r\n* __Decouple channels and emitted data__\r\n\r\nBoth Otto and EventBus use Events (defined classes) to carry data and also to represent the channel the subscribers\r\nare listening to. This approach is valid but it is quite inflexible. \r\n\r\nAutobus allows representing channels as Strings and\r\ndata as a separate class; this way a subscriber can listen to a channel expecting a concrete class of data (or even Any class\r\nof data) and emitters can send data of a concrete class (or no data at all) to a concrete channel. When an emitter sends data of\r\nclass D to a channel C, every subscriber listening to channel C and expecting data of class D is notified. Also subscribers\r\nlistening to channel C and expecting data of any class are notified.\r\n\r\n\r\nComparison\r\n----------\r\n| Functionality                   | EventBus        | Otto        | Autobus                           |\r\n| --------------------------------|-----------------|-------------|---------------------------------- |\r\n| Declare event handling methods  | Name Convention | Annotations | Explicity                         |\r\n| Event inheritance               | Yes             | Yes         | No                                |\r\n| Cache most recent events        | Yes (sticky)    | No          | Yes (persistent emmit)            |\r\n| Event producers                 | No              | Yes         | No                                |\r\n| Event delivery in posting thread| Yes             | Yes         | Yes                               |\r\n| Event delivery in main thread   | Yes             | No          | Yes (using preprocessor)          |\r\n| Event delivery in bg thread     | Yes             | No          | Yes                               |\r\n| Aynchronous event delivery      | Yes             | No          | Yes                               |\r\n\r\n\r\nUsage\r\n--------\r\nYou can use Autobus in two different ways:\r\n\r\n* __Using Bus API__\r\n\r\n* Define data:\r\n\r\n```java\r\npublic class BusDataSample { /* Additional fields if needed */ }\r\n```\r\n  * Prepare listeners:\r\n\r\n```java\r\nBusListener<BusDataSample> listener = new BusListener<>(BusDataSample.class);\r\n```\r\n  * Subscribe listener to a bus (should be injected) and a channel, expecting a concrete class:\r\n\r\n```java\r\nbus.subscribe(\"TEST_CHANNEL\", listener);\r\n```\r\n\r\n  * Post events with data:\r\n\r\n```java\r\nbus.emitEvent(\"TEST_CHANNEL\", new BusDataSample());\r\n```\r\n\r\n* __Using BusObservable API__\r\n  \r\n* Define data:\r\n\r\n```java\r\npublic class BusDataSample { /* Additional fields if needed */ }\r\n```\r\n\r\n  * Define BusObservable passing a channel and a bus (should be injected) and specifying the class that will be emitted through it:\r\n\r\n```java\r\nBusObservable<BusDataSample> busObservable = new BusObservable<>(\"TEST_CHANNEL\", bus);\r\n```\r\n\r\n  * Prepare listeners:\r\n\r\n```java\r\nBusListener<BusDataSample> listener = new BusListener<>(BusDataSample.class);\r\n```\r\n\r\n  * Subscribe listener to the BusObservable:\r\n\r\n```java\r\nbusObservable.subscribe(listener);\r\n```\r\n\r\n  * Post events with data using BusObservable:\r\n\r\n```java\r\nbusObservable.emitEvent(new BusDataSample());\r\n```\r\n\r\n\r\nLatest version\r\n--------------\r\nWe are working to make this lib available in a public Maven repository.\r\nFor the moment you can find the latest stable JAR in the root of this GitHub repo as autobus-0.1.0.jar or\r\nyou can build the JAR file yourself from the source code.\r\n\r\n\r\nLicense\r\n-------\r\nThis project is licensed under the Apache Software License, Version 2.0.\r\n\r\n    Copyright (c) 2015 bq\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n [1]: http://square.github.com/otto/\r\n [2]: https://github.com/greenrobot/EventBus\r\n [3]: https://github.com/ReactiveX/RxJava\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}